### Django Models

```
ORM - Object Relational Mapping
```

1. Django models
   - Every model is a separate table
   - Every variable using the 'models' is a column in this table
   - Models spare us the writing of low level SQL code

2. Model Creation
   - Inherits `models.Model`


3. Migrations
   - `makemigrations`
   - `migrate`

4. Other commands
   - `dbshell` - opens a console that allows us to write SQL
   - `CTRL + ALT + R` - opens the manage.py console

---

### Migrations and Admin

1. Django Migrations Advanced
   - Migrations help us with building on top of existing models
   - As well as keeping previous states in our database
   - Commands:
     - makemigrations
     - migrate
     - Return to a specific migration - migrate main_app 0001
     - Return to the beginning - migrate main_app zero
     - showmigrations - shows all apps and their migrations
     - showmigrations app_name - shows the migrations of this app
     - showmigrations --list - showmigrations -l
     - squashmigrations app_name migration_to_which_you_want_to_sqash - squashes the selected migrations into one
     - sqlmigrate app_name migration_name -  It gives us the SQL of the current migration, helping us see if it is valid
     - makemigrations --empty main_app - makes an empty migration file for the app that we specify

2. Custom/Data migrations
   - When we add a new column and want to populate it with existing data we use - data migrations
   - RunPython
     - calling this func gives us access to all apps and their state App (first parameter), Scheme Editor (second parameter)
     - it's a good practice to create a reverse function to bring back the previous state
   - Scheme Editor - class, that makes our python code into SQL, we use it to do create, alter and delete in the table
     - using RunPython usually we won't need to use the Schema Editor unless we have to create a temporary table
   - Steps:

      2.1. Create an Empty mmigration file: makemigrations --empty main_app - makes an empty migration in specified app

      2.2. Operations definition - using RunPython to complete data migrations

      2.3. Applying the changes - migrate

Example with Temp Table:

Let's say we have a model „Person“ in your Django app and want to create a temp table, to store calculated
values from the „Person“ table.
In this case we can use data migrations:

1. **Create the Data Migration:**

Run the following command to create a data migration:

```bash
python manage.py makemigrations your_app_name --empty
```

This will create an empty data migration file.

2. **Edit the Data Migration:**

Open the generated data migration file and modify it to use `RunPython` with a custom Python function that utilizes the `SchemaEditor` to create a temporary table. Here's an example:

```python
from django.db import migrations, models

def create_temporary_table(apps, schema_editor):
    # Get the model class
    Person = apps.get_model('your_app_name', 'Person')

    # Access the SchemaEditor to create a temporary table
    schema_editor.execute(
        "CREATE TEMPORARY TABLE temp_person_data AS SELECT id, first_name, last_name FROM your_app_name_person"
    )

def reverse_create_temporary_table(apps, schema_editor):
    schema_editor.execute("DROP TABLE temp_person_data")

class Migration(migrations.Migration):

    dependencies = [
        ('your_app_name', 'previous_migration'),
    ]

    operations = [
        migrations.RunPython(create_temporary_table, reverse_create_temporary_table),
    ]
```

3. Django admin
   - createsuperuser
   - Register model, example:

   ```python
      @admin.register(OurModelName)
      class OurModelNameAdmin(admin.ModelAdmin):
   	pass
   ```
4. Admin site customizations
  - __str__ override the method to visualise the object better in the admin site

  - list_display - Select the fields you want to visualise in the admin page
    Example:
    ```python
    class EmployeeAdmin(admin.ModelAdmin):
    	list_display = ['job_title', 'first_name', 'email_address']
    ```

  - List filter - it adds a side panel with ready filters
    Example:

      ```python
       class EmployeeAdmin(admin.ModelAdmin):
       	list_filter = ['job_level']
      ```

  - Searched fields - we say in which fields we allow the search to work on, default = all
    Example:

    ```python
    class EmployeeAdmin(admin.ModelAdmin):
        search_fields = ['email_address']
    ```

  - Layout changes - we chose which fields and in what layout to be shown when we want to change or add a new entry
    Example:

    ```python
    class EmployeeAdmin(admin.ModelAdmin):
        fields = [('first_name', 'last_name'), 'email_address']
    ```

  - list_per_page

  - fieldsets - changes the visual representation of fields
    Example:
    ```python
      fieldsets = (
           ('Personal info',
            {'fields': (...)}),
           ('Advanced options',
            {'classes': ('collapse',),
           'fields': (...),}),
      )
    ```

---

### Data Operations in Django with queries


1. CRUD overview
   - CRUD - Create, Read, Update, Delete
   - We use it with:
     - Web Development
     - Database Management
   - It gives us a consistent way of using the CRUD methods
   - We can do it through Django's ORM

2. Django Manager :
    - Class attribute for database operations.
    - Responsible for CRUD methods.
    - Custom Manager: Inherits models.Model.
       - Why do we personalise the managers:
         - Encapsulating common or more complex queries.
         - Better code readability.
         - We dodge code repeatability and improve code reuse-ability.
         - Change the number of queries according to project needs.

3. Django Queryset
   - QuerySet - Django class we use to store the data from the queries
   - The data is not collected until we ask to see them (Lazy Evaluation)
   - cars = Cars.objects.all() # <QuerySet []>
   - print(cars)  # <QuerySet [Car object(1)]>

   - QuerySet Features:
     - Lazy Evaluation - The query is not executed until we ask to see the data
     - Retrieving objects - we can take all objects, or filter according to given criteria
     - Chaining filters - MyModel.objects.filter(category='electronics').filter(price__lt=1000)
     - query related objects - it allows us to look in the table in which we have relation to: # Query related objects using double underscores
related_objects = Order.objects.filter(customer__age__gte=18)
     - Ordering - ordered_objects = Product.objects.order_by('-price')
     - Pagination
      ```python
       from django.core.paginator import Paginator

        # Paginate queryset with 10 objects per page
        paginator = Paginator(queryset, per_page=10)
        page_number = 2
        print([x for x in paginator.get_page(2)])
      ```

4. Django Simple Queries
   - Object Manager - default Objects
   - Methods:
     - `all()`
     - `first()`
     - `get(**kwargs)`
     - `create(**kwargs)`
     - `filter(**kwargs)`
     - `order_by(*fields)`
     - `delete()`

5. Django Shell and SQL Logging
   - Django Shell
     - Gives us access to the whole project
     - python manage.py shell
   - SQL logging
     -  Enable SQL logging

```python
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # Other levels CRITICAL, ERROR, WARNING, INFO, DEBUG
    },
    'loggers': {
        'django.db.backends': {  # responsible for the sql logs
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
```

---


### Working with queries

Working with Queries


1. Useful Methods
   - filter() - returns a subset of objects; takes **kwargs returns a QuerySet<[]>
   - exclude() - returns subset of objects; takes kwargs; returns a  QuerySet<[]>;
   - order_by() - returns the sorted objects; - for desc;
   - count() - just like len(), but faster; count it returns only the count, without the objects;
   - get() - gets ONE object with the given criteria;


2. Chaning methods
   - every method works with the result from the previous one


3. Lookup keys
   - We use them in filter, exclude, get;
   - __exact __iexact - matches exactly;
   - __contains __icontains - checks if the substring is contained in the string;
   - __startswith __endswith
   - __gt __gte
   - __lt __lte
   - __range=(2, 5) - both inclusive

4. Bulk methods
   - we use them to use operations on one or more objects at the same time
   - bulk_create - creates multiple objects at once;
   - filter().update()
   - filter().delete()

---

###  Django Relations

Django Models Relations


1. Database Normalization
   - Efficient Database Organization
     - Data normalization - breaks big tables into smaller ones, making the data more organised
     - Example: In the case of having an online store, instead of having one table with data for Name, Address, Username, Orders we break it into several tables

    - Guidelines and Rules
      - First Normal Form
      	- First Normal Form (1NF): we eliminate repeating entries, every table stores unique entries.

        - Second Normal Form (2NF): executes the 1NF making the data dependent on the PK
          - Example: Online store with data and orders Customers and Orders are connected with PK, instead of everything being in the same table

	- Third Normal Form (3NF):
          - Getting rid of rel
          - Table employees stores id, employee, city, address => we break them into 3 tables and we chain them, not only with the PK, you can with city_id now employee is independent

        - Boyce-Codd Normal Form (BCNF):
          - More strict version of the 3NF
          - Here we chain them with the PK

	 - Fourth Normal Form (4NF):
          - If data from one table are used in another two, that is not good
          - Example: We have rate X and rate Y, in X you need the books A and B, in Y, A and C,
            what we do now is create a table with books A and books B

         - Fifth Normal Form (5NF) - Project-Join Normal Form or PJ/NF:
           - In short, that we don't need to go through tables which info we don't need to use the info that we do not need (to spare the extra JOIN's)

   - Database Schema Design
      - The creation of different Keys and their relations to other Keys

   - Minimizing Data Redundancy
     - With breaking the table we will have reduced repeated information
     - We have a book and copies, the copies are in a separate table, and they are linked to the original

   - Ensuring Data Integrity & Eliminating Data Anomalies
     - This helps us update and delete data in the tables, the same way everywhere
     - Through some constraints we can delete data somewhere in a table and the changes to take place in another table

   - Efficiency and Maintainability
     - Thanks to the smaller size tables, we can get query results and update/delete info faster

2. Django Models Relations
   - We can create them using the Foreignkey fields
   - related_name - backwards relationship to the table
     - default value is the name of the table + _set

   - Example:
   ```py
   class Author(models.Model):
       name = models.CharField(max_length=100)

   class Post(models.Model):
       title = models.CharField(max_length=200)
       content = models.TextField()
       author = models.ForeignKey(Author, on_delete=models.CASCADE)
   ```

- Access all posts written by an author
```py
author = Author.objects.get(id=1)
author_posts = author.post_set.all()
```

3. Types of relationships
   - Many-To-One (One-To-Many)
   - Many-To-Many
     - No matter in which model you are going to add the ManyToMany field
     - Django automatically creates the join table, called also the junction table
     - But, if we want, we can create them ourselves, using through= Attribute:
      ```py
      class Author(models.Model):
          name = models.CharField(max_length=100)

      class Book(models.Model):
          title = models.CharField(max_length=200)
          authors = models.ManyToManyField(Author, through='AuthorBook')

      class AuthorBook(models.Model):
          author = models.ForeignKey(Author, on_delete=models.CASCADE)
          book = models.ForeignKey(Book, on_delete=models.CASCADE)
          publication_date = models.DateField()
      ```

   - OneToOne, we put it with the PK
   - Self-referential Foreign Key
      - Example: We have workers, and they can be managers to other workers

   ```py
   class Employee(models.Model):
       name = models.CharField(max_length=100)
       supervisor = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)
   ```

    - Lazy Relationships - the object from the relation is being shown when it is being asked for

---

### Models Inheritance and Customization

1. Types of Inheritance
   - Multi-table
     - We extend a model with fields from another model, by not copying the fields, but using the Django created pointer, who makes a One-To-One Relationship
     - Example:

	```py
	class Person(models.Model):
	    name = models.CharField(max_length=100)
	    date_of_birth = models.DateField()

	    def is_student(self):
	        """Check if this person is also a student."""
	        return hasattr(self, 'student')

	class Student(Person):
	    student_id = models.CharField(max_length=15)
	    major = models.CharField(max_length=50)
	```


   - Abstract Base Classes
     - In this inheritance, you are not creating two tables but one, that is the (Child) table, where the (Parent) table is just a blueprint
     - We get that result by changing the Meta class:
       ```py
       class AbstractBaseModel(models.Model):
           common_field1 = models.CharField(max_length=100)
           common_field2 = models.DateField()

           def common_method(self):
               return "This is a common method"

           class Meta:
               abstract = True
       ```

   - Proxy Models
     - We use them to add functionality to models that we cannot access
     - We can add new methods, but not new Fields
     - Example:

	```py
	class Article(models.Model):
	    title = models.CharField(max_length=200)
	    content = models.TextField()
	    published_date = models.DateField()

	class RecentArticle(Article):
	    class Meta:
	        proxy = True

	    def is_new(self):
	        return self.published_date >= date.today() - timedelta(days=7)

	    @classmethod
	    def get_recent_articles(cls):
	        return cls.objects.filter(published_date__gte=date.today() - timedelta(days=7))
	```

2. Basic Built-In Methods
   - `save()` - We use it to save the entries
	```py
	    def save(self, *args, **kwargs):
	        # Check the price and set the is_discounted field
	        if self.price < 5:
	            self.is_discounted = True
	        else:
	            self.is_discounted = False

	        # Call the "real" save() method
	        super().save(*args, **kwargs)
	```
   - `clean()` - we use it to validate several fields, example we have a t-shirt in 3 colors, but if we choose red then we have only 2 left.


3. Custom Model Properties
   - Just like in OOP we can create new @property that is not going to be saved in the database
   - We use them for dynamically calculating values

4. Custom Model Fields
   - We use them when Django does not have a field that we need
   - We have methods like:
     - from_db_value - we call it when we want to take the values from the database to the python program
     - to_python - we call it when we do deserialization or clean
     - get_prep_value - opposite to from_db_value, from Python to the database, mainly used for serialization
     - pre_save - we use it for last minute changes, just before we save the data into the db

	```py
	class RGBColorField(models.TextField):
	    # Convert the database format "R,G,B" to a Python tuple (R, G, B)
	    def from_db_value(self, value, expression, connection):
	        if value is None:
	            return value
	        return tuple(map(int, value.split(',')))

	    # Convert any Python value to our desired format (tuple)
	    def to_python(self, value):
	        if isinstance(value, tuple) and len(value) == 3:
	            return value
	        if isinstance(value, str):
	            return tuple(map(int, value.split(',')))
	        raise ValidationError("Invalid RGB color format.")

	    # Prepare the tuple format for database insertion
	    def get_prep_value(self, value):
	        # Convert tuple (R, G, B) to "R,G,B" for database storage
	        return ','.join(map(str, value))
	```

---

### Advanced Django Models Techniques


1. Validation in Models
   - Built-in Validators
     - MaxValueValidator, MinValueValidator - takes two arguments (limit, message)
     - MaxLengthValidator, MinLengthValidator - takes two arguments (limit, message)
     - RegexValidator - takes two arguments (regex, message)
	```py
	class SampleModel(models.Model):
	    name = models.CharField(
	        max_length=50,
	        validators=[MinLengthValidator(5)]  # Name should have a minimum length of 5 characters
	    )

	    age = models.IntegerField(
	        validators=[MaxValueValidator(120)]  # Assuming age shouldn't exceed 120 years
	    )

	    phone = models.CharField(
	        max_length=15,
	        validators=[
		    RegexValidator(
		        regex=r'^\+?1?\d{9,15}$',
	                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed."
		)]  # A simple regex for validating phone numbers
	    )
	```
 - Custom Validators - functions, we often write in a different file, when we have an error we raise ValidationError


2. Meta Options and Meta Inheritance
   - In the Meta class we can change:
     - The name of the table
     - The order of the data
     - We can add constraints
     - We can add the class type (proxy, abstract)
	```py
	class SampleModel(models.Model):
	    name = models.CharField(max_length=50)
	    age = models.IntegerField()
	    email = models.EmailField()

	    class Meta:
	        # Database table name
	        db_table = 'custom_sample_model_table'

	        # Default ordering (ascending by name)
	        ordering = ['name'] - This happens on SELECT, not on INSERT

	        # Unique constraint (unique combination of name and email)
	        unique_together = ['name', 'email']
	```
    - Meta Inheritance:
      - When we inherit an abstract class but we don't override the Meta class, we inherit the abstract Meta class
	```py
	class BaseModel(models.Model):
	    name = models.CharField(max_length=100)

	    class Meta:
	        abstract = True
	        ordering = ['name']

	class ChildModel(BaseModel):
	    description = models.TextField()
	    # ChildModel inherits the Meta options
	```

3. Indexing
   - Indexing helps us to order the elements in a particular order, helping us with the searching of the elements.
   - Increases the speed of data retrieval, decreases the speed of data writing.
   - In Django we can add an index to a field using the key-word argument db_index=True
   - We can create an index using the Meta class, where we can even make a composite index
	```py
	class Meta:
	indexes=[
	models.Index(fields=["title", "author"]),  # makes the searching by two criteria faster
	models.Index(fields=["publication_date"])
	]
	```


4. Django Model Mixins
   - As we know, mixins are classes we use to separate common functionalities

	```py
	class TimestampMixin(models.Model):
	    created_at = models.DateTimeField(auto_now_add=True)
	    updated_at = models.DateTimeField(auto_now=True)
		class Meta:
	    	    abstract = True
	```

---

### Advanced Django Queries

1. Custom managers
   - We use them to export the business logic we use frequently in a separate place
   - We create it by inheriting the models.Manager class.

	```py
	    class BookManager(models.Manager):
	        def average_rating(self):
	            # Calculate the average rating of all books
	            return self.aggregate(avg_rating=models.Avg('rating'))['avg_rating']

	        def highest_rated_book(self):
	            # Get the highest-rated book
	            return self.order_by('-rating').first()
	```

2. Annotations and Aggregations
   - Annotations -we use them, to add new fields in the returned result, often on the basis of some calculations. It returns a QuerySet<[]>.
   - Example:

	```py
	# Annotating the queryset to get the count of books for each author
	authors_with_book_count = Book.objects.values('author').annotate(book_count=Count('id'))
	```
   - Aggregations - they return one field(one value), often the results of aggregate functions.It returns a dict

	```py
	# Aggregating the queryset to get the average rating of all books
	average_rating = Book.objects.aggregate(avg_rating=Avg('rating'))
	```

3. select_related & prefetch_related
   - select_related - reduces the number of queries to the database in a  One-To-One and Many-To-One queries
     - instead lazily taking the data from the objects we do a  JOIN with the first query
     - Example:

	```py
	from django.db import models

	class Author(models.Model):
	    name = models.CharField(max_length=100)

	class Book(models.Model):
	    title = models.CharField(max_length=100)
	    author = models.OneToOneField(Author, on_delete=models.CASCADE)

	books_with_authors = Book.objects.select_related('author')
	# SELECT * FROM "myapp_book" JOIN "myapp_author" ON ("myapp_book"."author_id" = "myapp_author"."id")

	```

   - prefetch_related - Reduces the number of queries in Many-To-Many(not only) until the number of relations + 1
   - Example:

	```py
	class Author(models.Model):
	    name = models.CharField(max_length=100)

	class Book(models.Model):
	    title = models.CharField(max_length=100)
	    authors = models.ManyToManyField(Author)

	authors_with_books = Author.objects.prefetch_related('book_set')

	# 1. SELECT * FROM "myapp_author"
	# 2. SELECT * FROM "myapp_book" INNER JOIN "myapp_book_authors" ON ("myapp_book"."id" = "myapp_book_authors"."book_id")
	```

4. Q and F

  - We use the Q object, to do more complex queries
  - Example:

	```py
	q = Q(title__icontains='Django') & (Q(pub_year__gt=2010) | Q(author='John Doe'))

	books = Book.objects.filter(q)

	```

  - We use F object, to access the data we iterate through, on SQL level.

	```py
	from django.db.models import F

	Book.objects.update(rating=F('rating') + 1)
	```

---
### SQL Alchemy

1. SQL Alchemy - ORM - Object Relational Mapper
   - ORM - abstraction allowing us to write SQL queries, through Python
   - Core - it looks after the transactions, sending queries, sessions and database pooling

2. SetUp:
   1. ```pip install sqlalchemy```
   2. ```pip install psycopg2```

3. Models
   - Similar to Django we inherit a base class, `Base`, which we take as a result of calling the  `declarative_base()` function

	```py

	from sqlalchemy.ext.declarative import declarative_base

	Base = declarative_base()

	class User(Base):
	    __tablename__ = 'users'
	    id = Column(Integer, primary_key=True)
	    name = Column(String)
	```

4. Migrations

   4.1 SetUp:
   	- Not included in SQLAlchemy, for migrations we can use  `Alembic`

	- ```pip install alembic```

 	- ```alembic init alembic``` - it creates the file structure for the migrations<\br>

	- ```sqlalchemy.url = postgresql+psycopg2://username:password@localhost/db_name``` - във файла alembic.ini

 	- ```py target_metadata = Base.metadata``` - in file env.py, to be able to use autogenerate

   4.2 Commands:
   	- ```alembic revision --autogenerate -m "Add User Table"``` - creates migrations with a message, just like  `makemigrations`

	- ```alembic upgrade head``` - it implements the migrations like `migrate`

	- ```alembic downgrade -1``` - it reverses a migration

6. CRUD
   - We open a connection with the database, by creating a new session
   - We always close the session, after we have finished with the manipulation
   - We have to commit() the result, just like in Django where we use `save()`

	```py
	from sqlalchemy import create_engine
	from sqlalchemy.orm import sessionmaker

	engine = create_engine('sqlite:///example.db')
	Session = sessionmaker(bind=engine)
	session = Session()

	with Session() as session: # a good practice
	...
	```

   5.1 Add:
      ```py
         new_user = User(username='john_doe', email='john@example.com')
         session.add(new_user)
      ```

   5.2 Query
      ```py
   	users = session.query(User).all()
      ```


   5.3 Update
      ```py

	with engine.connect() as connection:
	    # Create an update object
	    upd = update(User).where(User.name == 'John').values(nickname='new_nickname')

	    # Execute the update
	    connection.execute(upd)
      ```

	or

      ```py
	session.query(User).filter(User.name == 'John').update({"nickname": "new_nickname"}, synchronize_session=False)
	session.commit()
      ```

   5.4 Delete
       ```py

    	del_stmt = delete(User).where(User.name == 'John')
       ```


8. Transactions
	- `session.begin()`

	- `session.commit()`

 	- `session.rollback()`


9. Relationships
   1. Many to One
      ```py
         user_id = Column(Integer, ForeignKey('users.id'))
         user = relationship('User')
      ```
   2. One to One
     - `uselist=false`
	```py
	class User(Base):
	    __tablename__ = 'users'
	    id = Column(Integer, primary_key=True)
	    profile = relationship("UserProfile", back_populates="user", uselist=False)

	class UserProfile(Base):
	    __tablename__ = 'profiles'
	    id = Column(Integer, primary_key=True)
	    user_id = Column(Integer, ForeignKey('users.id'))
	    user = relationship("User", back_populates="profile")
	```

   3. Many to many
     ```py

	user_group_association = Table('user_group', Base.metadata,
	    Column('user_id', Integer, ForeignKey('users.id')),
	    Column('group_id', Integer, ForeignKey('groups.id'))
	)

	class Group(Base):
	    __tablename__ = 'groups'
	    id = Column(Integer, primary_key=True)
	    users = relationship("User", secondary=user_group_association, back_populates="groups")

	class User(Base):
	    __tablename__ = 'users'
	    id = Column(Integer, primary_key=True)
	    groups = relationship("Group", secondary=user_group_association, back_populates="users")

    ```


10. Database pooling
```py engine = create_engine(DATABASE_URL, pool_size=10, max_overflow=20)``` - it gives initial connections and maximum connections